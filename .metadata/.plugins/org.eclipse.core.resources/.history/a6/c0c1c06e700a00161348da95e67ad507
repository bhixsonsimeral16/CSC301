package puzzle;

import edu.princeton.cs.algs4.Queue;

public class Board {
	private final int[][] boardStart;
	private final int SIZE;
	public final int hamming;
	public final int manhattan;
	private int row0;
	private int col0;
	
	// construct a board from an N-by-N array of tiles
	// (where tiles[i][j] = tile at row i, column j)
	public Board(int[][] tiles) {
		this.boardStart = new int[tiles.length][tiles[0].length];
		this.SIZE = boardStart.length;
		for(int i = 0; i < tiles.length; i++){
			for(int j = 0; j < tiles.length; j++){
				boardStart[i][j] = tiles[i][j];
				if(boardStart[i][j] == 0){
					this.row0 = i;
					this.col0 = j;
				}
			}
		}
		this.hamming = hamming();
		this.manhattan = manhattan();
	}

	// return tile at row i, column j (or 0 if blank)
	public int tileAt(int i, int j) throws IndexOutOfBoundsException {
		if(i < 0 || i >= SIZE || j < 0 || j >= SIZE){
			throw new IndexOutOfBoundsException("That tile does not exist");
		}
		return boardStart[i][j];
	}

	// board size N
	public int size() {
		return SIZE;
	}

	// number of tiles out of place
	public int hamming() {
		int hamming = 0;
		for(int i = 0; i < SIZE; i++){
			for(int j = 0; j < SIZE; j++){
				if(!(i == SIZE -1 && j == SIZE -1)){
//					System.out.println(boardStart[i][j]);
					if(boardStart[i][j] != 1 + (SIZE * i) + j){
//						System.out.println(boardStart[i][j]);
						hamming++;
					}
				}
			}
		}
		return hamming;
	}

	// sum of Manhattan distances between tiles and goal
	public int manhattan() {
		int manhattan = 0;
		for(int i = 0; i < SIZE; i++){
			for(int j = 0; j < SIZE; j++){
				if(boardStart[i][j] != 0){
					
					//subtract one to make the value line up with the int[][] better
					int num = boardStart[i][j] - 1;
					
					//calculate target row and column
					int col = num % SIZE;
					int row = (int) Math.floor(num / SIZE);
					
					int colDiff = Math.abs(col - j);
					int rowDiff = Math.abs(row - i);
					
					manhattan += (colDiff + rowDiff);
				}
			}
		}
		return manhattan;
	}

	// is this board the goal board?
	public boolean isGoal() {
		return hamming == 0;
	}

	// is this board solvable?
	public boolean isSolvable() {
		if(isGoal()) return true;
		
		long inversions = 0;
		int[] arr = new int[SIZE * SIZE -1];
		
		// create 2d array to make checks easier
		int count = 0;
		for (int i = 0; i < SIZE; i++) {
			for (int j = 0; j < SIZE; j++) {
				if(boardStart[i][j] != 0){
					arr[count] = boardStart[i][j];
					count++;
				}
			}
		}
		
		// Code changed to use the merge sort implementation
		
//		// check for any smaller number appearing afterwards in the array
//		for (int i = 0; i < arr.length - 1; i++) {
//			for (int j = i + 1; j < arr.length; j++) {
//				if (arr[i] > arr[j]) {
//					inversions++;
//				}
//			}
//		}
		
		//count inversions using merge sort
		inversions = count(arr);
		
		// if odd
		if (SIZE % 2 == 1) {
			return (inversions % 2 == 0);
		}

		// if even
		else {
			long sum = inversions;
			sum += row0;
			return (sum % 2 == 1);
		}
	}

	// does this board equal y?
	public boolean equals(Object y) {
		if (y.getClass() == this.getClass()) {
			for (int i = 0; i < SIZE; i++) {
				for (int j = 0; j < SIZE; j++) {
					if (this.boardStart[i][j] != ((Board) y).boardStart[i][j]) {
						return false;
					}
				}
			}
			return true;
		}
		else return false;
	}
	
	// Following 3 methods were taken from the algs4 implementation of Inversions.java
	// http://algs4.cs.princeton.edu/22mergesort/Inversions.java.html
	// This implementation uses merge sort to count the number of inversions in an array
	
	/**
     * Returns the number of inversions in the integer array.
     * The argument array is not modified.
     * @param  a the array
     * @return the number of inversions in the array. An inversion is a pair of 
     *         indicies <tt>i</tt> and <tt>j</tt> such that <tt>i &lt; j</tt>
     *         and <tt>a[i]</tt> &gt; <tt>a[j]</tt>.
     */
	public static long count(int[] a) {
        int[] b   = new int[a.length];
        int[] aux = new int[a.length];
        for (int i = 0; i < a.length; i++)
            b[i] = a[i];
        long inversions = count(a, b, aux, 0, a.length - 1);
        return inversions;
	}
	
	// return the number of inversions in the subarray b[lo..hi]
    // side effect b[lo..hi] is rearranged in ascending order
	
	// Personal Note: Why include int[] a?  It doesn't seem that it is referenced anywhere
	// It is in the recursive call, but it is not ever accessed or modified.
	private static long count(int[] a, int[] b, int[] aux, int lo, int hi) {
        long inversions = 0;
        if (hi <= lo) return 0;
        int mid = lo + (hi - lo) / 2;
        inversions += count(a, b, aux, lo, mid);  
        inversions += count(a, b, aux, mid+1, hi);
        inversions += merge(b, aux, lo, mid, hi);
        return inversions;
    }

    // merge and count
	private static long merge(int[] a, int[] aux, int lo, int mid, int hi) {
        long inversions = 0;

        // copy to aux[]
        for (int k = lo; k <= hi; k++) {
            aux[k] = a[k]; 
        }

        // merge back to a[]
        int i = lo, j = mid+1;
        for (int k = lo; k <= hi; k++) {
            if      (i > mid)           a[k] = aux[j++];
            else if (j > hi)            a[k] = aux[i++];
            else if (aux[j] < aux[i]) { a[k] = aux[j++]; inversions += (mid - i + 1); }
            else                        a[k] = aux[i++];
        }
        return inversions;
    }

	// all neighboring boards
	public Iterable<Board> neighbors() {
		Queue<Board> q = new Queue<Board>();
		if (col0 != 0){
			int[][] neighbor1 = swap(row0, col0, row0, col0-1, boardStart);
			q.enqueue(new Board(neighbor1));
		}
		if (col0 != SIZE-1){
			int[][] neighbor2 = swap(row0, col0, row0, col0+1, boardStart);
			q.enqueue(new Board(neighbor2));
		}
		if (row0 != 0){
			int[][] neighbor3 = swap(row0, col0, row0-1, col0, boardStart);
			q.enqueue(new Board(neighbor3));
		}
		if (row0 != SIZE-1){
			int[][] neighbor4 = swap(row0, col0, row0+1, col0, boardStart);
			q.enqueue(new Board(neighbor4));
		}
		return q;
	}
	
	private int[][] swap(int row0, int col0, int row1, int col1, int[][] boardStart){
		int[][] neighbor = boardStart;
		neighbor[row0][col0] = boardStart[row1][col1];
		neighbor[row1][col1] = boardStart[row0][col0];
		
		return neighbor;
	}

	// string representation of this board (in the output format specified below)
	public String toString() {
		StringBuilder s = new StringBuilder();
	    s.append(SIZE + "\n");
	    for (int i = 0; i < SIZE; i++) {
	        for (int j = 0; j < SIZE; j++) {
	            s.append(String.format("%2d ", tileAt(i, j)));
	        }
	        s.append("\n");
	    }
	    return s.toString();
	}

	// unit testing (required)
	public static void main(String[] args) {
//		int[][] testArr = {{1,2,3},{7,8,0},{4,5,6}};
//		int[][] testArr2 = {{2,1,3},{7,8,0},{4,5,6}};
		int[][] testArr3 = {{1,2,3},{0,7,6},{5,4,8}};
		int[][] testArr4 = {{1,2},{3,0}};
		
//		Board b = new Board(testArr);
//		Board c = new Board(testArr2);
		Board d = new Board(testArr3);
		Board e = new Board(testArr4);
		
		
		System.out.println(e.toString());
//		System.out.println(b.manhattan + "  " + b.hamming);
//		System.out.println(c.manhattan + "  " + c.hamming);
		System.out.println(e.manhattan + "  " + e.hamming);
		System.out.println(e.isSolvable());
		
	}
}
