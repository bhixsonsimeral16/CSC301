package puzzle;

import edu.princeton.cs.algs4.In;
import edu.princeton.cs.algs4.MinPQ;
import edu.princeton.cs.algs4.Stack;
import edu.princeton.cs.algs4.StdOut;

public class Solver {
	private MinPQ<SearchNode> minpq;
	private SearchNode currentNode;
	
	// find a solution to the initial board (using the A* algorithm)
	public Solver(Board initial) throws IllegalArgumentException, NullPointerException {
		if(initial == null){
			throw new NullPointerException("This board is null.");
		}
		if(!initial.isSolvable()){
			throw new IllegalArgumentException("This board is not solvable.");
		}
		
		this.minpq = new MinPQ<SearchNode>();
		this.minpq.insert(new SearchNode(initial, 0, null));
		this.currentNode = minpq.delMin();

		while (!currentNode.b.isGoal()) {
			for (Board b : currentNode.b.neighbors()) {
				if (currentNode.prev == null){
					minpq.insert(new SearchNode(b, currentNode.moves + 1, currentNode));
				}
				else{
					if (!b.equals(currentNode.prev.b)) {
						minpq.insert(new SearchNode(b, currentNode.moves + 1, currentNode));
					}
				}
			}
			this.currentNode = minpq.delMin();
		}
	}
	
	private class SearchNode implements Comparable<SearchNode>{
		private Board b;
		private int moves;
		private SearchNode prev;
		public SearchNode(Board b, int moves, SearchNode prev){
			this.b = b;
			this.prev = prev;
			this.moves = moves;
		}
		
		public int compareTo(SearchNode sn){
			if(this.b.manhattan + this.moves > sn.b.manhattan + sn.moves){
				return 1;
			}
			else if(this.b.manhattan + this.moves == sn.b.manhattan + sn.moves){
				return 0;
			}
			else{
				return -1;
			}
		}
	}

	// min number of moves to solve initial board
	public int moves() {
		return currentNode.moves;
	}

	// sequence of boards in a shortest solution
	public Iterable<Board> solution() {
		Stack<Board> q = new Stack<Board>();
		SearchNode recurse = currentNode;
		q.push(recurse.b);
		
		while(recurse.prev != null){
			q.push(recurse.prev.b);
			recurse = recurse.prev;
		}
		return q;
	}

	// solve a slider puzzle (given below)
	public static void main(String[] args) {

	    // create initial board from file
	    In in = new In(args[0]);
	    int N = in.readInt();
	    int[][] tiles = new int[N][N];
	    for (int i = 0; i < N; i++)
	        for (int j = 0; j < N; j++)
	            tiles[i][j] = in.readInt();
	    Board initial = new Board(tiles);

	    // check if puzzle is solvable; if so, solve it and output solution
	    if (initial.isSolvable()) {
	        Solver solver = new Solver(initial);
	        StdOut.println("Minimum number of moves = " + solver.moves());
	        for (Board board : solver.solution())
	            StdOut.println(board);
	    }

	    // if not, report unsolvable
	    else {
	        StdOut.println("Unsolvable puzzle");
	    }
	}
}
