import edu.princeton.cs.algs4.Point2D;
import edu.princeton.cs.algs4.Queue;
import edu.princeton.cs.algs4.RectHV;
import edu.princeton.cs.algs4.Stack;

public class KdTreeST<Value> {
	private int size;
	private KdNode root;
	
	// construct an empty symbol table of points
	public KdTreeST() {
		this.size = 0;
		this.root = null;
	}
	
	private class KdNode implements Comparable<KdNode>{
		private KdNode leftChild;    // left subtree
		private KdNode rightChild;   // right subtree
		private int level;           // is the node on an odd level of the tree
		private Point2D p;           // Associated key
		private Value val;           // Associate value
		private RectHV rect;
		
		public KdNode(Point2D p, Value val, RectHV rect){
			this.p = p;
			this.val = val;
			this.level = 0;
			this.rect = rect;
			this.leftChild = null;
			this.rightChild = null;
		}
		// if the level is odd, compare x values
		// if the level is even, compare y values
		public int compareTo(KdNode node) {
			if(node.p.x() == this.p.x() && node.p.y() == this.p.y()){
				return 0;
			}
			
			// if the level is odd we compare x coords
			if(node.level % 2 == 1){
				if(this.p.x() >= node.p.x()){
					return 1;
				}
				else {
					return -1;
				}
			}
			// if the level is even we compare y coords
			else{
				if(this.p.y() >= node.p.y()){
					return 1;
				}
				else {
					return -1;
				}
			}
		}
	}

	// is the symbol table empty?
	public boolean isEmpty() {
		return this.size == 0;
	}
	
	// number of points
	public int size() {
		return this.size;
	}
	
	// associate the value val with point p
	public void put(Point2D p, Value val) {
		if (p == null) throw new NullPointerException("first argument to put() is null");
//        if (val == null) {
//            delete(p);
//            return;
//        }
		RectHV xRect = new RectHV(-Double.MAX_VALUE, -Double.MAX_VALUE, Double.MAX_VALUE, Double.MAX_VALUE);
		KdNode node = new KdNode(p, val, xRect);
        root = put(root, node);
        this.size++;
}
	
	private KdNode put(KdNode x, KdNode node){
		node.level++;
		
		//if no node here, then place the node here
		if( x == null){
			return node;
		}
		
		int cmp = node.compareTo(x);
		
		//move the node down the left or right subtree depending on compareTo()
		if(cmp > 0){
			if(x.level % 2 == 1){
				RectHV rightRect = new RectHV(x.p.x(), x.rect.ymin(), x.rect.xmax(), x.rect.ymax());
				node.rect = rightRect;
			}
			else{
				RectHV topRect = new RectHV(x.rect.xmin(), x.p.y(), x.rect.xmax(), x.rect.ymax());
				node.rect = topRect;
			}
			x.leftChild = put(x.leftChild, node);
		}
		else if(cmp < 0){
			if(x.level % 2 == 1){
				RectHV leftRect = new RectHV(x.rect.xmin(), x.rect.ymin(), x.p.x(), x.rect.ymax());
				node.rect = leftRect;
			}
			else{
				RectHV botRect = new RectHV(x.rect.xmin(), x.rect.ymin(), x.rect.xmax(), x.p.y());
				node.rect = botRect;
			}
			x.rightChild = put(x.rightChild, node);
		}
		else{
			x.val = node.val;
		}
		return x;

	}
	
	// value associated with point p
	public Value get(Point2D p) {
		return get(root, p);
	}
	
	private Value get(KdNode x, Point2D p){
		if(x == null){
			return null;
		}
		double cmp;
		
		// if the level is odd, compare x coords
		if(x.level % 2 == 1){
			cmp = p.x() - x.p.x();
		}
		// if the level is even, compare y coords
		else{
			cmp = p.y() - x.p.y();
		}
		
		// if p is greater than or equal to x.p then go right
		if (cmp <= 0){
			// if p is equal to x.p then return the value
			if(p.x() - x.p.x() == 0 && p.y() - x.p.y() == 0){
				return x.val;
			}
			return get(x.leftChild, p);
		}
		// if p is less than x.p then go left
		else {
			return get(x.leftChild, p);
		}
	}
	
	// does the symbol table contain point p?
	public boolean contains(Point2D p) {
		Value v = get(p);
		return v != null;
	}
	
	// all points in the symbol table
	public Iterable<Point2D> points() {
		Queue<Point2D> q = new Queue<Point2D>();
		Queue<KdNode> nodeQ = new Queue<KdNode>();
		
		nodeQ.enqueue(root);
		while(!nodeQ.isEmpty()){
			//dequeue the first item and enqueue its children
			//enqueue the item's Point2D in the second queue
			KdNode node = nodeQ.dequeue();
			if(node.leftChild != null){
				nodeQ.enqueue(node.leftChild);
			}
			if(node.rightChild != null){
				nodeQ.enqueue(node.rightChild);
			}
			
			q.enqueue(node.p);
		}
		return q;
	}
	
	// all points that are inside the rectangle
	public Iterable<Point2D> range(RectHV rect) {
		Queue<Point2D> q = new Queue<Point2D>();
		Stack<KdNode> s = new Stack<KdNode>();
		s.push(root);
		
		// If the rectangles intersect then go down the tree, starting with the left side
		while(!s.isEmpty()){
			KdNode node = s.pop();
			if(node != null){
				if(rect.intersects(node.rect)){
					if(rect.contains(node.p)){
						q.enqueue(node.p);
					}
					s.push(node.rightChild);
					s.push(node.leftChild);
				}
			}
		}
		
		return q;
	}
	
	
	/**
	 * 
	 * This is the recursive version of range
	 * I have decided to use the iterative version instead
	 */
//	public Iterable<Point2D> range(RectHV rect) {
//		Queue<Point2D> q = new Queue<Point2D>();
//		return range(rect, root, q);
//	}
//	
//	private Iterable<Point2D> range(RectHV rect, KdNode x, Iterable<Point2D> q){
//		if(x == null){
//			return q;
//		}
//		if(rect.intersects(x.rect)){
//			if(rect.contains(x.p)){
//				((Queue) q).enqueue(x.p);
//			}
//			q = range(rect, x.leftChild, q);
//			q = range(rect, x.rightChild, q);
//		}
//			
//		return q;
//	}
	
	// a nearest neighbor to point p; null if the symbol table is empty
	public Point2D nearest(Point2D p) {
		Point2D champ = null;
		double champDist = Double.MAX_VALUE;
		Stack<KdNode> s = new Stack<KdNode>();
		
		s.push(root);
		while(!s.isEmpty()){
			KdNode node = s.pop();
			if(node != null){
				// Is the closest point of the rectangle closer than the champ
				// If not, then the point this subtree is not worth checking
				if (node.rect.distanceSquaredTo(p) < champDist) {

					// Is the point closer than the previous champ
					// If so, set new champ and champDist (so that it doesn't need to be computed multiple times)
					if (node.p.distanceSquaredTo(p) < champDist) {
						champ = node.p;
						champDist = champ.distanceSquaredTo(p);
					}
					
					// If the right rectangle contains the point then the left does not
					// In this case, check the right side first
					if (node.rightChild.rect.contains(p)) {
						s.push(node.leftChild);
						s.push(node.rightChild);
					} 
					else {
						s.push(node.rightChild);
						s.push(node.leftChild);
					}
				}
			}
		}
		
		return champ;
	}
	
	// unit testing (required)
	public static void main(String[] args) {

	}
}
