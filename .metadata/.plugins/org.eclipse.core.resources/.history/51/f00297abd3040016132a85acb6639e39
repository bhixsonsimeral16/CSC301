import java.util.Iterator;
import java.util.NoSuchElementException;

import edu.princeton.cs.algs4.StdRandom;


public class RandomizedQueue<Item> implements Iterable<Item> {
	private Item[] resizableArr;
	private int items;
	
	// construct an empty randomized queue
	public RandomizedQueue() {
		this.resizableArr = (Item[]) new Object[1];
		this.items = 0;
	}

	// is the queue empty?
	public boolean isEmpty() {
		return (items <= 0);
	}

	// return the number of items on the queue
	public int size() {
		return items;
	}

	// add the item
	public void enqueue(Item item) {
		resizableArr[items] = item;
		items++;
		if(items == resizableArr.length){
			resize();
		}
		
	}

	// remove and return a random item
	public Item dequeue() {
		int rand = StdRandom.uniform(items);
		Item item = resizableArr[rand];
		for(int i = rand; i < items; i++){
			resizableArr[i] = resizableArr[i + 1];
		}
		items--;
		if(items > 0 && items <= resizableArr.length/4){
			resize();
		}
		return item;
	}

	// return a random item (but do not remove it)
	public Item sample() {
		int rand = StdRandom.uniform(items);
		return resizableArr[rand];
	}

	// return an independent iterator over items in random order
	public Iterator<Item> iterator() {
		return new ListIterator();
	}
	
	private void resize(){
		if (items == resizableArr.length){
			Item[] newArr = (Item[]) new Object[resizableArr.length * 2];
			for( int i = 0; i < items; i++){
				newArr[i] = resizableArr[i];
			}
			resizableArr = newArr;
		}
		else if (items > 0 && items <= resizableArr.length/4){
			Item[] newArr = (Item[]) new Object[resizableArr.length / 2];
			for( int i = 0; i < items; i++){
				newArr[i] = resizableArr[i];
			}
			resizableArr = newArr;
		}
	}
	
	private class ListIterator implements Iterator<Item>{
		private int index = 0;
		
		public boolean hasNext(){
			return (resizableArr[index] != null);
		}
		
		public Item next() throws NoSuchElementException{
			if(!hasNext()){
				throw new NoSuchElementException("There are no more elements");
			}
			Item item = resizableArr[index];
			index++;
			return item;
		}
		public void remove() throws UnsupportedOperationException{
			throw new UnsupportedOperationException("The remove() method is not supported");
		}
	}

	// unit testing (required)
	public static void main(String[] args) {
		RandomizedQueue<Integer> r = new RandomizedQueue<Integer>();
		for(int i = 0; i < 10; i++){
			
			r.enqueue(i);
			System.out.println(r.items + "  " + r.resizableArr.length);
		}
		for(int i = 0; i < 10; i++){
			System.out.println(r.dequeue());
		}
	}
}
