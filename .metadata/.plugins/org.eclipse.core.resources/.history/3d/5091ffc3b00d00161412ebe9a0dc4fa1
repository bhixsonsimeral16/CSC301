import edu.princeton.cs.algs4.MaxPQ;
import edu.princeton.cs.algs4.Point2D;
import edu.princeton.cs.algs4.Queue;
import edu.princeton.cs.algs4.RectHV;
import edu.princeton.cs.algs4.Stack;

public class KdTreeST<Value> {
	private int size;
	private KdNode root;
	
	// construct an empty symbol table of points
	public KdTreeST() {
		this.size = 0;
		this.root = null;
	}
	
	private class KdNode implements Comparable<KdNode>{
		private KdNode leftChild;    // left subtree
		private KdNode rightChild;   // right subtree
		private int level;           // is the node on an odd level of the tree
		private Point2D p;           // Associated key, (x, y) coordinates
		private Value val;           // Associated value
		private RectHV rect;         // Associated rectangle
		
		public KdNode(Point2D p, Value val, RectHV rect) {
			this.p = p;
			this.val = val;
			this.level = 0;
			this.rect = rect;
			this.leftChild = null;
			this.rightChild = null;
		}
		// if the level is odd, compare x values
		// if the level is even, compare y values
		public int compareTo(KdNode node) {
			if(node.p.x() == this.p.x() && node.p.y() == this.p.y()) {
				return 0;
			}
			
			// if the level is odd we compare x coords
			if(node.level % 2 == 1) {
				if(this.p.x() >= node.p.x()) {
					return 1;
				}
				else {
					return -1;
				}
			}
			// if the level is even we compare y coords
			else{
				if(this.p.y() >= node.p.y()) {
					return 1;
				}
				else {
					return -1;
				}
			}
		}
	}

	// is the symbol table empty?
	public boolean isEmpty() {
		return this.size == 0;
	}
	
	// number of points
	public int size() {
		return this.size;
	}
	
	// associate the value val with point p
	public void put(Point2D p, Value val) {
		if (p == null) throw new NullPointerException("first argument to put() is null");

		// The root's rectangle is always the entire area
		// Therefore we start with the root rectangle and trim it based on values in the Kd-tree
		RectHV xRect = new RectHV(-Double.MAX_VALUE, -Double.MAX_VALUE, Double.MAX_VALUE, Double.MAX_VALUE);
		KdNode node = new KdNode(p, val, xRect);
		
		// Check this node against the root
		// This will being the recursive calls to put()
        root = put(root, node);
        
        // Increment size after every put() call
        this.size++;
}
	
	private KdNode put(KdNode x, KdNode node) {
		node.level++;
		
		//if no node here, then place the node here
		if( x == null) {
			return node;
		}
		
		int cmp = node.compareTo(x);
		
		// move the node down the left or right subtree depending on compareTo()
		// create a rectangle based on what level the point is on as well as which subtree
		// the node belongs to.
		if(cmp > 0) {
			if(x.level % 2 == 1) {
				// if the level is odd and cmp > 0 then the associated rectangle will be 
				// to the right of the previous node's point
				RectHV rightRect = new RectHV(x.p.x(), x.rect.ymin(), x.rect.xmax(), x.rect.ymax());
				node.rect = rightRect;
			}
			else{
				// if the level is even and cmp > 0 then the associated rectangle will be 
				// on top of the previous node's point
				RectHV topRect = new RectHV(x.rect.xmin(), x.p.y(), x.rect.xmax(), x.rect.ymax());
				node.rect = topRect;
			}
			x.leftChild = put(x.leftChild, node);
		}
		else if(cmp < 0) {
			if(x.level % 2 == 1) {
				// if the level is odd and cmp < 0 then the associated rectangle will be 
				// to the left of the previous node's point
				RectHV leftRect = new RectHV(x.rect.xmin(), x.rect.ymin(), x.p.x(), x.rect.ymax());
				node.rect = leftRect;
			}
			else{
				// if the level is odd and cmp < 0 then the associated rectangle will be 
				// on the bottom of the previous node's point
				RectHV botRect = new RectHV(x.rect.xmin(), x.rect.ymin(), x.rect.xmax(), x.p.y());
				node.rect = botRect;
			}
			x.rightChild = put(x.rightChild, node);
		}
		else{
			x.val = node.val;
		}
		return x;

	}
	
	// value associated with point p
	public Value get(Point2D p) {
		return get(root, p);
	}
	
	private Value get(KdNode x, Point2D p) {
		if(x == null) {
			return null;
		}
		double cmp;
		
		// if the level is odd, compare x coords
		if(x.level % 2 == 1) {
			cmp = p.x() - x.p.x();
		}
		// if the level is even, compare y coords
		else{
			cmp = p.y() - x.p.y();
		}
		
		// if p is greater than or equal to x.p then go right
		if (cmp <= 0) {
			// if p is equal to x.p then return the value
			if(p.x() - x.p.x() == 0 && p.y() - x.p.y() == 0) {
				return x.val;
			}
			return get(x.leftChild, p);
		}
		// if p is less than x.p then go left
		else {
			return get(x.leftChild, p);
		}
	}
	
	// does the symbol table contain point p?
	public boolean contains(Point2D p) {
		Value v = get(p);
		return v != null;
	}
	
	// all points in the symbol table
	public Iterable<Point2D> points() {
		Queue<Point2D> q = new Queue<Point2D>();
		
		// We use a queue because we want to visit the nodes 
		// in the order they were added
		Queue<KdNode> nodeQ = new Queue<KdNode>();
		
		nodeQ.enqueue(root);
		while(!nodeQ.isEmpty()) {
			
			KdNode node = nodeQ.dequeue();
			
			// node == null implies that we have reached the end of the branch
			if (node != null) {
				// enqueue the children to get their Point2Ds
				nodeQ.enqueue(node.leftChild);
				nodeQ.enqueue(node.rightChild);
				
				// Since the node is not null, enqueue it's Point2D
				q.enqueue(node.p);
			}
		}
		return q;
	}
	
	// all points that are inside the rectangle
	public Iterable<Point2D> range(RectHV rect) {
		Queue<Point2D> q = new Queue<Point2D>();
		
		// This stack implements depth-first priority on the Kd-tree
		Stack<KdNode> s = new Stack<KdNode>();
		s.push(root);
		
		// If the rectangles intersect then go down the tree, starting with the left side
		while(!s.isEmpty()) {
			KdNode node = s.pop();
			
			// If the node is null, that signifies the end of a branch
			if(node != null) {
				
				// If the two rectangles intersect then we push both children
				// Left is checked first by convention
				if(rect.intersects(node.rect)) {
					
					// Since the rectangles intersected, it may contain the point
					if(rect.contains(node.p)) {
						q.enqueue(node.p);
					}
					s.push(node.rightChild);
					s.push(node.leftChild);
				}
			}
		}
		
		return q;
	}
	
	
	/**
	 * 
	 * This is the recursive version of range
	 * I have decided to use the iterative version instead
	 */
//	public Iterable<Point2D> range(RectHV rect) {
//		Queue<Point2D> q = new Queue<Point2D>();
//		return range(rect, root, q);
//	}
//	
//	private Iterable<Point2D> range(RectHV rect, KdNode x, Iterable<Point2D> q) {
//		if(x == null) {
//			return q;
//		}
//		if(rect.intersects(x.rect)) {
//			if(rect.contains(x.p)) {
//				((Queue) q).enqueue(x.p);
//			}
//			q = range(rect, x.leftChild, q);
//			q = range(rect, x.rightChild, q);
//		}
//			
//		return q;
//	}
	
	// a nearest neighbor to point p; null if the symbol table is empty
	public Point2D nearest(Point2D p) {
		// Initialize champ as null and as far away as possible
		Point2D champ = null;
		double champDist = Double.MAX_VALUE;
		
		// This stack will implement depth-first priority on the Kd-tree
		Stack<KdNode> s = new Stack<KdNode>();
		
		s.push(this.root);
		while(!s.isEmpty()) {
			KdNode node = s.pop();
			if(node != null) {
				// Is the closest point of the rectangle closer than the champ
				// If not, then the point this subtree is not worth checking
				if (node.rect.distanceSquaredTo(p) < champDist) {

					// Is the point closer than the previous champ
					// If so, set new champ and champDist (so that it doesn't need to be computed multiple times)
					if (node.p.distanceSquaredTo(p) < champDist) {
						champ = node.p;
						champDist = champ.distanceSquaredTo(p);
					}
					
					// If the right rectangle contains the point then the left does not
					// In this case, check the right side first
					if (node.rightChild != null && node.rightChild.rect.contains(p)) {
						s.push(node.leftChild);
						s.push(node.rightChild);
					} 
					
					// Check the left side first
					else {
						s.push(node.rightChild);
						s.push(node.leftChild);
					}
				}
			}
		}
		
		return champ;
	}
	
	// Return an Iterable of the k nearest points
	public Iterable<Point2D> nearest(Point2D p, int k) {
		
		// Sort the points by distance, delete the max distance when the PQ fills
		MaxPQ<distNode> pq = new MaxPQ<distNode>();
		
		// This is the queue that we will be returned
		// When the algorithm is complete the points from the MaxPQ will be copied over
		Queue<Point2D> q = new Queue<Point2D>();
		
		// This stack will implement depth-first priority on the Kd-tree
		Stack<KdNode> s = new Stack<KdNode>();
		
		// Push the root as the base-case to start the iterator
		s.push(this.root);
		
		while(!s.isEmpty()) {
			KdNode node = s.pop();
			if(node != null) {
				
				// If the PQ is not yet full then we will just add the point
				if(pq.size() < k) {
					pq.insert(new distNode(node.p, node.p.distanceSquaredTo(p)));
				}
				
				// If the PQ is full then determine whether this point is closer
				// than the farthest point in the PQ
				else {
					
					// Make the reference simpler
					double champDist = pq.max().dist;
					
					// Is the closest point of the rectangle closer than the max of the PQ
					// If not, then this subtree is not worth checking
					// If so, check to see if the point is closer than max and push the children
					if (node.rect.distanceSquaredTo(p) < champDist) {

						// If the point is closer than the Max of the PQ
						// Delete the max and insert the point
						if (node.p.distanceSquaredTo(p) < champDist) {
							pq.delMax();
							pq.insert(new distNode(node.p, node.p.distanceSquaredTo(p)));
						}

						// If the right rectangle contains the point then the left does not
						// In this case, check the right side first
						if (node.rightChild != null && node.rightChild.rect.contains(p)) {
							s.push(node.leftChild);
							s.push(node.rightChild);
						} 
						
						// Check the left side first
						else {
							s.push(node.rightChild);
							s.push(node.leftChild);
						}
					}
				}
			}
		}
		
		// Copy the Point2D objects to the queue
		// Distance is no longer important
		for(distNode dn : pq){
			q.enqueue(dn.p);
		}
		
		return q;
	}
	
	// Store the point and it's distance from a given point together
	// Do this to sort them together
	private class distNode implements Comparable<distNode> {
		private Point2D p;
		private double dist;
		
		public distNode(Point2D p, double dist) {
			this.p = p;
			this.dist = dist;
		}
		
		// If the dist is greater than or equal to then return 1
		// -1 otherwise
		// Will not return 0 because the PQ doesn't handle ties
		public int compareTo(distNode d) {
			if(this.dist >= d.dist) {
				return 1;
			}
			else {
				return -1;
			}
		}
	}
	
	// unit testing (required)
	public static void main(String[] args) {

	}
}
